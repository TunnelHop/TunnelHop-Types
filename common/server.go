// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package common

import "fmt"
import "encoding/json"

type Server struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Port corresponds to the JSON schema field "port".
	Port int `json:"port" yaml:"port"`

	// Status corresponds to the JSON schema field "status".
	Status bool `json:"status" yaml:"status"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Server) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Server: required")
	}
	if v, ok := raw["port"]; !ok || v == nil {
		return fmt.Errorf("field port in Server: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in Server: required")
	}
	if v, ok := raw["url"]; !ok || v == nil {
		return fmt.Errorf("field url in Server: required")
	}
	type Plain Server
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Server(plain)
	return nil
}
