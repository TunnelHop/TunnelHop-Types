// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package common

import "fmt"
import "encoding/json"

type Statistics struct {
	// ActiveConnections corresponds to the JSON schema field "active_connections".
	ActiveConnections int `json:"active_connections" yaml:"active_connections"`

	// AvgBytesEgress corresponds to the JSON schema field "avg_bytes_egress".
	AvgBytesEgress float64 `json:"avg_bytes_egress" yaml:"avg_bytes_egress"`

	// AvgBytesIngress corresponds to the JSON schema field "avg_bytes_ingress".
	AvgBytesIngress float64 `json:"avg_bytes_ingress" yaml:"avg_bytes_ingress"`

	// RegisteredDomains corresponds to the JSON schema field "registered_domains".
	RegisteredDomains int `json:"registered_domains" yaml:"registered_domains"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Statistics) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["active_connections"]; !ok || v == nil {
		return fmt.Errorf("field active_connections in Statistics: required")
	}
	if v, ok := raw["avg_bytes_egress"]; !ok || v == nil {
		return fmt.Errorf("field avg_bytes_egress in Statistics: required")
	}
	if v, ok := raw["avg_bytes_ingress"]; !ok || v == nil {
		return fmt.Errorf("field avg_bytes_ingress in Statistics: required")
	}
	if v, ok := raw["registered_domains"]; !ok || v == nil {
		return fmt.Errorf("field registered_domains in Statistics: required")
	}
	type Plain Statistics
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Statistics(plain)
	return nil
}
